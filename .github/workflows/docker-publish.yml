name: Publish rails container to ghcr.io

# Run workflow on tags starting with v (eg. v2, v1.2.0)
on:
  pull_request:
    branches: [ main preprod ]
  push:
    tags:
      - '*'
  workflow_dispatch: # pour être lancé à la main

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    runs-on: ubuntu-latest
    env:
      RAILS_ENV: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.2
          bundler-cache: true

      - name: Install Dependencies
        run: |
          gem install bundler
          bundle install

      - name: Run RuboCop
        run: bundle exec rubocop

  security:
    runs-on: ubuntu-latest
    env:
      RAILS_ENV: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.2
          bundler-cache: true

      - name: Install Dependencies
        run: |
          gem install bundler
          bundle install

      - name: Run Brakeman
        run: bundle exec brakeman -q -w2 --no-exit-on-warn

  run_tests:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: myapp_test
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      RAILS_ENV: test
      DATABASE_URL: postgres://postgres:password@localhost:5432/myapp_test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.2
          bundler-cache: true

      - name: Install Dependencies
        run: |
          gem install bundler
          bundle install

      - name: Set up the database
        run: |
          bundle exec rails db:create db:schema:load RAILS_ENV=test

      - name: Run Tests
        run: |
          bundle exec rails test  # This runs Minitest, or use 'bundle exec rspec' if using RSpec

  build_and_publish:
    needs: [lint, security, run_tests]
    strategy:
      fail-fast: true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        id: login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build container image
        shell: bash
        run: |
          docker build --tag sfor .

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=sha
          flavor: |
            latest=false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/build-push-action@v5
        with:
          push: ${{ github.actor != 'dependabot[bot]' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max`

  upload_sourcemaps:
    needs: [ run_tests, build_and_publish ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.2
          bundler-cache: true

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Precompile Rails Assets
        run: |
          SECRET_KEY_BASE_DUMMY=1 RAILS_ENV=production bundle exec rails assets:precompile

      - name: Minify JavaScript with Terser and Generate Sourcemaps
        run: |
          npm install -g terser
          find ./public/assets -name '*.js' -exec terser {} --compress --mangle --source-map "content=inline,url='{}.map'" -o {} \;

      - name: Upload Sourcemaps to Sentry
        uses: getsentry/action-release@v1
        with:
          environment: production
          version: ${{ github.sha }}
          projects: sfor
          sourcemaps: ./public/assets
          ignore_missing: true
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_URL: https://sentry.incubateur.net/
